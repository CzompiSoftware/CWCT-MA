@page "/{*remaining}"
@using CSCDNMA.Model;
@using CwctMa.Model.Xmd
@using CwctMa.Helpers
@using Markdig
@using System.IO
@using Microsoft.AspNetCore.Html
@inject ILogger<Index> _logger;
@if (File.Exists(FileName))
{
    var cdnUri = new Uri(Globals.Config.CdnUrl);
    var markdownFile = File.ReadAllText(FileName);
    var header = $"{markdownFile[0..(markdownFile.IndexOf("</metadata>", StringComparison.OrdinalIgnoreCase)+"</metadata>".Length)]}";
    //var meta = Globals.GetMetadata(Remaining ?? "");
    var meta = header.ParseXml<Metadata>();
    title = meta.Title;
    markdownFile = markdownFile[(header.Count())..];

    foreach (var t in Enum.GetNames<AssetType>())
    {
        @*markdownFile = markdownFile.Replace($"${{assetPath:{t}}}", $"${{assetTypeRoot:{t}}}{product}@{version}/", StringComparison.OrdinalIgnoreCase);*@
        markdownFile = markdownFile.Replace($"${{assetTypeRoot:{t}}}", $"${{cdnRoot}}{t.ToLowerInvariant()}/", StringComparison.OrdinalIgnoreCase);
    }
    markdownFile = markdownFile.Replace($"${{cdnRoot}}", "https://${cdnHost}/", StringComparison.OrdinalIgnoreCase);
    markdownFile = markdownFile.Replace($"${{cdnScheme}}", $"{cdnUri.Scheme}", StringComparison.OrdinalIgnoreCase);
    markdownFile = markdownFile.Replace($"${{cdnHost}}", $"{cdnUri.DnsSafeHost}", StringComparison.OrdinalIgnoreCase);
    @((MarkupString)Markdown.ToHtml(markdownFile, Globals.MarkdownPipeline))
    
    if (meta.ShowModifiedAt)
    {
        <p style="text-align: right;">Created@(meta.ReleasedAt == meta.ModifiedAt? " and last modified":"") at <b>@meta.ReleasedAt.ToSqlTimeString().Replace("T"," ")</b></p>
        if (meta.ReleasedAt != meta.ModifiedAt)
        {
            <p style="text-align: right;">Last modified at <b>@meta.ModifiedAt.ToSqlTimeString().Replace("T"," ")</b></p>
        }
    }
}
else
{
    title = "Not found";
    @((MarkupString)Markdown.ToHtml("]>danger< # Error 404\r\n] Sorry, there's nothing at this address.", Globals.MarkdownPipeline))
}

<PageTitle>@title - @Globals.Config.ShortName</PageTitle>

@code {
    [Parameter]
    public string Remaining { get; set; }

    public string CurrentPage => string.IsNullOrEmpty(Remaining) ?  "index" : Remaining;


    string title = "Not found";

    public string FileName
    {
        get
        {
            var fn = Path.Combine(Globals.ContentDirectory, $"{(Remaining ?? "index").Replace(".xmd", "", StringComparison.OrdinalIgnoreCase).Replace(".php", "", StringComparison.OrdinalIgnoreCase).Replace(".cshtml", "", StringComparison.OrdinalIgnoreCase).Replace(".html", "", StringComparison.OrdinalIgnoreCase).Replace(".htm", "", StringComparison.OrdinalIgnoreCase)}.xmd");
            try
            {
                fn = fn.GetActualFileName();
            }
            catch (FileNotFoundException fex)
            {
                _logger.LogWarning(fex, "No file!");
            }
            return fn;
        }
    }

    public IEnumerable<string> RemainingList {
        get
        {
            return Remaining?.Split("/");
        }
    }
}