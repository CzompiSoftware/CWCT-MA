@using Microsoft.Extensions.Logging

        <header>
            <!-- #region Czompi Group products -->
            <nav class="nav nav-sticky group">
                <div class="container w-100">
                    @foreach (GroupConfigItem group in Globals.Group.Groups) {
                        @if(group.Id == Globals.Group.Current)
                        {
                        @((MarkupString)$"<div class=\"nav-item group-{group.Id}\"><span class=\"active\">{group.Name}</span></div>")
                        }
                        else
                        {
                            @((MarkupString)$"<div class=\"nav-item group-{group.Id}\"><a href={group.Url}\">{group.Name}</a></div>")
                        }
                    }
                </div>
            </nav>
            <!-- #endregion -->
            
            <!-- #region Navigation menu -->
            <div class="container">
                <nav class="nav menu">
                    <a href="/" class="brand">
                        <img src="@CDN.GetUrl($"img/{Globals.Config.Id}/{Globals.Config.Id}-logo.svg")">
                    </a>
                    <a class="nav-mobile" @onclick="ToggleNavMenu"></a>
                    <NavMenu NavMenuCssClass="@NavMenuCssClass" Header="@this"/>
                </nav>
            </div>
                    @GetPage()
            <!-- #endregion -->
        </header>
@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => !collapseNavMenu ? " show" : null;
    private string Page {get; set;}
    [Inject] 
    public NavigationManager NavigationManager {get; set;}
    [Inject] 
    public ILogger<Header> Logger {get; set;}
    
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += HandleLocationChanged;
    }
    public string GetPage() => Page;

    private void HandleLocationChanged(object sender, LocationChangedEventArgs e)
    {
        Page = new Uri(e.Location).AbsolutePath[1..];
        Logger.LogInformation($"Page: '{Page}'");
        Logger.LogInformation("URL of new location: {Location}", e.Location);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }
}