@using CWCTMA.Model.XMD
@using Microsoft.AspNetCore.Http
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Http.Extensions
        <header>
            <!-- #region Czompi Group products -->
            <nav class="nav nav-sticky group">
                <div class="container w-100">
                    @foreach (GroupConfigItem group in Globals.Group.Groups) {
                        @if(group.Id == Globals.Group.Current)
                        {
                        @((MarkupString)$"<div class=\"nav-item group-{group.Id}\"><span class=\"active\">{group.Name}</span></div>")
                        }
                        else
                        {
                            @((MarkupString)$"<div class=\"nav-item group-{group.Id}\"><a href=\"{group.Url}\">{group.Name}</a></div>")
                        }
                    }
                </div>
            </nav>
            <!-- #endregion -->
            
            <!-- #region Navigation menu -->
            <div class="container">
                <nav class="nav menu">
                    <a href="/" class="brand">
                        <img src="@CDN.GetUrl($"img/{Globals.Config.Id}/{Globals.Config.Id}-logo.svg")">
                    </a>
                    <a class="nav-mobile" href="#" role="button" data-bs-toggle="collapse" data-bs-target="#navbar-main" aria-controls="navbar-main" aria-expanded="false" aria-label="Toggle navigation"></a>
                    <div class="nav-items dropdown-menu navbar-collapse collapse" aria-labelledby="navbar-main" id="navbar-main">
                        @foreach (Metadata page in Globals.Pages.Where(x => x.IsNavMenuItem == true).OrderBy(x=>x.NavMenuId))
                        {
                            <div class="nav-item">
                                <NavLink Match="NavLinkMatch.All" class="" href="@($"/{page.Id}")" ActiveClass="active">
                                    @(page.Title)
                                </NavLink>
                            </div>
                        }
                    </div>
                </nav>
            </div>
            <!-- #endregion -->
        </header>
@code {
    [Inject] 
    public IHttpContextAccessor HttpContextAccessor {get; set;}

    private string Page => HttpContextAccessor?.HttpContext?.Request.Path.ToString().TrimStart('/')?? "";

    public string GetPage() => Page;

    protected override void OnParametersSet()
    {
        Globals.RefreshPages();
    }
}